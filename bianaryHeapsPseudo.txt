MAX BINARY HEAP
Each parent has at most two child nodes
The value of each parent node is always greater than its child nodes
In a max Binary Heap the parent is greater than the children, but there are no guarantees between sibling nodes.
A binary heap is as compact as possible. All the children of each node are as full as they can be and left children are filled out firs


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////// 
insert pseudo
//////////////////////////

//push the value into the values property on the heap

// bubble up:

    //create a variable called index which is the length of the values property-1
    // create a variable called parentIndex that is the floor of ((index-1)/2)
    //keep looping as long as the values element at the parentIndex is less than the values of the elements at the child index
        //swap the value of the values element property at the childindex
        // set the index to be the parent index and start over 


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////
// removing pseudo
//////////////////////////

// swap the first value in the values property with the last one

//pop from the values property,  to return the value at the end.

// have new root "sink down" to its correct spot

    //parent index starts at root

    // find the index of the left child: 2*index+1

    // find index of the right child: 2*index+2

    // if left or right child is greater than the element swap, if both left and right are larger swap with the largest child

    // the child index you swapped now becomes the new parent index 

    // keep looping and swaping until neither child is larger than the element. 

    // return the old root 

    