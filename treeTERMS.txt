tree properties

Root - The top node in a tree.
Child -A node directly connected to another node when moving away from the Root.
Parent - The converse notion of a child.
Siblings -A group of nodes with the same parent.
Leaf - A node with no children.
Edge - The connection between one node and another.


Binary search Tree properties

Every parent node has at most two children
Every node to the left of a parent node is always less than the parent
Every node to the right of a parent node is always greater than the parent

////////////////////////////////////////////////////////////////////////////


////////////////
inserting a node
////////////////

// Create a new node

// starting at the root 
    // check if there is a root, if not the root now becomes the new node 
    // if there is a root, check is the value of the new node is greaer than or less than the value of the root 
    
    // if greater 
        //check to see if there is a node to the right
        // if there is, move the node and repeat these steps  
        // if there is not, add a node to the right property
    
    // if it is less
        //check if there is a node to the left
            // if there is, move to that node and repeat these steps 
            // if there is not, add that node as the left property 


////////////////////////////////////////////////////////////////////////////


////////////////////
// finding a node 
/////////////////////


//starting at the root 

    // check if there is a root, if not we are done searching 
    // if there is a root, check if the value of the new node is the value we are looking for, if found, we are done
    // if not check to see if the value is greater than or less than the value of the root 

    //if it is greater 
        // check to see if there is a node to the right 
        // if there is, move that node and repeat these steps 
        // if there is not. we are done searching 
    
    // if it is less 
        // check to see if there is a node to the left 
            // if there is, move that node and repeat steps
            // if not, we are finished  

////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

//////////////////////// 
// Breadth First search
//////////////////////// 

//create a que(it can be an array) and  a variable o store the values of nodes visited

//placew the root node in the que  

// loop as long as there is anything in the queue

    // dequeue a node from the queue and push the value of the node into the visited variable
    //if there is a left property on the node dequeued, add it to the queue
    // if there is a right property on the node dequeued, add it to the queue 

// return the variable that stores the values

////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

////////////////////////////////// 
// depth first search PreOrder
//////////////////////////////////

// create a variable to store the values of the nodes visited

// store the root of the BST in a var called current

// write a helper function which accepts a node 

    //push the value of the node to the variable that stores the values (values or 'data' variable)
    // if the node has a left property  call the helper function with the left property  on the node 
    //if the node has a right property call the helper function with the right property on the node 

// invoke the helper function with the current variable

// return the array of values


////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////


////////////////////////////////// 
// depth first search PostOrder
//////////////////////////////////

// create a variable to store the values of the nodes visited

// store the root of the BST in a var called current

// write a helper function which accepts a node 

    //push the value of the node to the variable that stores the values (values or 'data' variable)
    // if the node has a left property  call the helper function with the left property  on the node 
    //if the node has a right property call the helper function with the right property on the node 

// invoke the helper function with the current variable

// return the array of values