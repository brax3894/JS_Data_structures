////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////
//pushing pseudo
///////////////////////

//create new node with the value passed to the function

//if the head property is null set the head and tail to be the newly created node

//if not, set the next property on the tail to be that node 

//set the previous property on the newly created node to be the  tail 

//set the tail to be the newly created node 

//return the doubly linked list

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////
//pop pseudo
///////////////////////

//if there is no head return undefined 

//store the currenttail in variable to return later

//if the length is 1, set the head and tail to be null

//update the tail to be the previous node

//set new tail's .next to be null

//decrement length

//return the removed value 

//////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////
shift pseudo 
///////////////////////

//if length is 0, return undefined 

//store the current head property in a variable(shiftedHead)

//if the length is one:

    // set the head to be null
    // set the tail to be null 

//update the head to be the next of the old head

//set head's previous property to be null

//set the old head's next to be null

//decrement the length 

//return old head

///////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////
unshift pseudo
/////////////////////////

//create a new node with the value passed to the function

//if the length is 0:
    //set the head to be the new node
    //set the tail to be the new node 

//otherwise:
    //set the prev property on the head of the list to be the new node 

    // set the next property on the new node to be the head property 

    //update the head to be the new node 

//increment length 
// return the list 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////
//get psuedo 
///////////////////////

//if the index is less than 0 or greater or eqaul to the LENGTH, return null

//if the index is less than or equal to half the lengt hof the list 
    //loop through the list starting from the head and loop toward the middle 
    //return the node once it is found 

// if the index is greater than half of the length of the list 
    //loop throught the list starting from the tail and loop toward the middle 
    //return the node once it is found 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////
//set pseudo
///////////////////////

//create a variable which is the result of the get method at the index passed to the function 
    //if the get method returns a valid node, set the value of that node to be the value passed to the return function
    //return true
//otherwise return false

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////
// insert pseudo
///////////////////////

//if the index is less than or greater than or equal to the length, return false

//if the index is 0, unshift

//if the index is the same as the length, push

//use the get method to access the index-1

//set the next and previous properties on the correct nodes to ling everything together

//increment the length 

//return true

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////
//insert pseudo
///////////////////////

//if the index is less than zero is less than zero or greater than or equal to the length return false

//if the index is zero, unshift

//if the index is the same as the length, push

//use the GET method to access the index-1

// set the next and prev properties on the correct nodes to link it all together 

//increment the length 

//retun true

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////
//remove pseudo
///////////////////////

//if the index is less than zero OR greater than or equal to the length, return undefined;

//if the index is 0, shift

//if the index is the same as the length-1, pop

//use the get method to retrieve the item removed 

// update the next and prev propertied to remove the found node from the list

//set next prev to null on the found node 

// decrement the the length 

// return the removed node 